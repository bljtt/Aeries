// Backend: Express + MongoDB (students can edit their own grades/schedule)

// Install first: npm install express mongoose bcryptjs jsonwebtoken cors dotenv

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB connected'));

// --- MODELS --- //
const studentSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
  grades: [{ subject: String, score: Number }],
  schedule: [{ day: String, subject: String, time: String }],
});

const Student = mongoose.model('Student', studentSchema);

// --- MIDDLEWARE --- //
const auth = async (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) return res.status(401).send('Missing token');
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.student = await Student.findById(decoded.id);
    if (!req.student) return res.status(401).send('User not found');
    next();
  } catch (e) {
    res.status(401).send('Invalid token');
  }
};

// --- ROUTES --- //

// Signup
app.post('/signup', async (req, res) => {
  const { name, email, password } = req.body;
  const hashed = await bcrypt.hash(password, 10);
  try {
    const student = await Student.create({ name, email, password: hashed, grades: [], schedule: [] });
    res.status(201).send('User created');
  } catch (e) {
    res.status(400).send('Email already in use');
  }
});

// Login
app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const student = await Student.findOne({ email });
  if (!student || !(await bcrypt.compare(password, student.password))) {
    return res.status(401).send('Invalid credentials');
  }
  const token = jwt.sign({ id: student._id }, process.env.JWT_SECRET);
  res.json({ token });
});

// Get student data
app.get('/me', auth, (req, res) => {
  const { name, email, grades, schedule } = req.student;
  res.json({ name, email, grades, schedule });
});

// Update grades
app.put('/grades', auth, async (req, res) => {
  req.student.grades = req.body.grades;
  await req.student.save();
  res.send('Grades updated');
});

// Update schedule
app.put('/schedule', auth, async (req, res) => {
  req.student.schedule = req.body.schedule;
  await req.student.save();
  res.send('Schedule updated');
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
